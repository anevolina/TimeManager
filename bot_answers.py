from timers_bunch import TimersBunch
from datetime import datetime

class TimeManagerBot:

    last_timer_start = 0
    extended10 = 0

    def __init__(self, user_id, lang):
        self.lang = lang
        self.user_id = user_id
        self.timers = TimersBunch()

    def get_help(self):

        if self.lang == 'EN':
            message = """To start input times you want to count. """
        else:
            message = '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤ - –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ 50-10-30-50 ' \
                      '—Å–æ–∑–¥–∞—Å—Ç 4 —Ç–∞–π–º–µ—Ä–∞ –ø–æ 50, 10, 30 –∏ 50 –º–∏–Ω—É—Ç.\n'\
                      '\n–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–º–µ—é—Ç.'

        return message

    def check_callbak(self, message):
        """–î–û–ø–æ–ª–Ω–∏—Ç—å, —á—Ç–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–π–º–µ—Ä—ã"""
        time_periods = self.timers.get_time_periods(message)

        if len(time_periods) > 0:
            self.timers.set_current_timers_bunch(time_periods)
            bot_message = self.get_init_timers_message(time_periods)
            timer_on = True


        return bot_message, timer_on

    def get_current_timer_message(self):
        if self.timers.scheduled_bunch:
            next_timer = self.timers.scheduled_bunch[0]
        else:
            return False

        if self.lang == "EN":
            message = 'Current timer is for ' + str(next_timer) + ' minutes. Press start!'
        else:
            message = '–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ ' + str(next_timer) + ' –º–∏–Ω—É—Ç? –ñ–º–∏ —Å—Ç–∞—Ä—Ç!'

        return message

    def get_init_timers_message(self, time_periods):

        if len(time_periods) == 1:
            if self.lang == 'EN':
                message = 'There will be set 1 timer for ' + str(time_periods[0]) + ' minutes'
            else:
                message = '–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 1 —Ç–∞–π–º–µ—Ä –Ω–∞ ' + str(time_periods[0]) + ' –º–∏–Ω—É—Ç'

        else:
            timers = self.get_timers_count(time_periods)

            if self.lang == 'EN':

                message = 'There will be set {} timers for '.format(len(time_periods)) + timers + ' minutes'
            else:
                message = '–ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–∞–π–º–µ—Ä—ã ({}—à—Ç) –Ω–∞ '.format(len(time_periods)) + timers + ' –º–∏–Ω—É—Ç'

        return message

    def get_started_timer_message(self):
        if self.lang == "EN":
            message = 'Timer for {} min. is started! To pause the timer, press the ‚åõ button'.format(self.timers.current_time)
        else:
            message = '–¢–∞–π–º–µ—Ä –Ω–∞ {} –º–∏–Ω. –∑–∞–ø—É—â–µ–Ω. –ß—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –∂–º–∏ –Ω–∞ ‚åõ'.format(self.timers.current_time)

        return message

    def get_finished_timer_message(self):
        if self.lang == 'EN':
            if self.timers.scheduled_bunch:
                message = message = 'Timer for {} min. just finished. Continue?'.format(self.timers.current_time)
            else:
                message = 'All timers have finished! Well done!'
        else:
            if self.timers.scheduled_bunch:
                message = message = '–¢–∞–π–º–µ—Ä –Ω–∞ {} –º–∏–Ω. –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?'.format(self.timers.current_time)
            else:
                message = '–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞—Ç—å üíÉ'
        return message

    def get_paused_timer_message(self):
        mins = self.timers.current_time
        remain = self.timers.scheduled_bunch[0]

        if self.lang == 'EN':
            message = 'Timer for {} min. was paused. Remain {} min. Press any button to continue'.format(mins, remain)
        else:
            message = '–¢–∞–π–º–µ—Ä –Ω–∞ {} –º–∏–Ω. –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å {} –º–∏–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É'.format(mins, remain)

        return message

    def get_alarm_message(self):
        if self.lang == 'EN':
            message = 'Time is over!'
        else:
            message = '–í—Ä–µ–º—è –≤—ã—à–ª–æ!'
        return message

    def get_confirm_message(self):
        if self.lang == 'EN':
            message = 'You\'ve extended the current timer for {} minutes. Are you sure you don\'t want to change your' \
                      'activity?\n\nYour brain need some rest to be more productive!'.format(self.extended10*10)
        else:
            message = '–¢—ã –ø—Ä–æ–¥–ª–µ–≤–∞–µ—à—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä —É–∂–µ –Ω–∞ {} –º–∏–Ω—É—Ç. –ù–µ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?' \
                      '\n\n–ú–æ–∑–≥—É –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º.'.format(self.extended10*10)
        return message

    def get_timers_count(self, time_periods):
        if len(time_periods) == 1:
            return str(time_periods[0])

        else:
            timers = ', '.join([str(time_periods[i]) for i in range(len(time_periods)-1)])

            if self.lang == 'EN':
                timers += ' and ' + str(time_periods[-1])
            else:
                timers += ' –∏ ' + str(time_periods[-1])

        return timers

    def start_timer(self, next_func):
        self.last_timer_start = datetime.now()
        return self.timers.start_timer(next_func)
