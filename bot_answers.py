from timers_bunch import TimersBunch
from datetime import datetime
import re

class TimeManagerBot:

    def __init__(self, user_id, lang):

        self.user_id = user_id

        self.timers = TimersBunch()

        self.lang = lang
        self.alarm_count = 1
        self.alarm_message = ''
        self.add_more = 10
        self.auto_start = True

        self.last_timer_start = 0
        self.extended10 = 0
        self.message_id = 0

    def check_callbak(self, message, settings_update, user_id):

        timer_on = False
        bot_message = 'Something went wrong'
        prev_message = 0

        set_update = settings_update.get(user_id)

        if not set_update:

            time_periods = self.timers.get_time_periods(message)

            if len(time_periods) > 0:

                prev_message = self.message_id

                self.refresh_timers()
                self.timers.set_current_timers_bunch(time_periods)
                bot_message = self.get_init_timers_message(time_periods)
                timer_on = True
        else:
            if set_update == 'alarm_message':
                self.alarm_message = message
                bot_message = self.get_setted_alarm_message_message()
                settings_update.pop(user_id)

            elif set_update == 'alarm_count':
                count = self.check_is_number(message)
                if count:
                    self.alarm_count = int(message)
                    bot_message = self.get_setted_alarm_count_message()
                    settings_update.pop(user_id)
                else:
                    bot_message = self.get_wrong_format_message('alarm_count')

            elif set_update == 'add_more':
                count = self.check_is_number(message)
                if count:
                    self.add_more = int(message)
                    bot_message = self.get_setted_add_more_message()
                    settings_update.pop(user_id)
                else:
                    bot_message = self.get_wrong_format_message('add_more')

        return bot_message, timer_on, prev_message

    def start_timer(self, next_func):
        self.last_timer_start = datetime.now()
        return self.timers.start_timer(next_func)

    def refresh_timers(self):

        self.timers.clear()

        self.last_timer_start = 0
        self.extended10 = 0
        self.message_id = 0


    # generate messages for bot answers

    def get_help_message(self):

        if self.lang == 'EN':
            message = 'To start input times in minutes you want to count. For example, command 50-10-50-30 will create' \
                      '4 timers with 50, 10, 50 and 30 minutes. Delimiters between numbers don\'t matter.' \
                      '\n\n/settings  command will return current settings for timers.'
        else:
            message = '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö - –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ 50-10-30-50 ' \
                      '—Å–æ–∑–¥–∞—Å—Ç 4 —Ç–∞–π–º–µ—Ä–∞ –ø–æ 50, 10, 30 –∏ 50 –º–∏–Ω—É—Ç.\n'\
                      '\n–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–º–µ—é—Ç.' \
                      '\n\n–∫–æ–º–∞–Ω–¥–∞  /settings  –≤—ã–≤–µ–¥–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤.'

        return message

    def get_current_timer_message(self):
        if self.timers.scheduled_bunch:
            next_timer = self.timers.scheduled_bunch[0]
        else:
            return False

        if self.lang == "EN":
            message = 'Current timer is for ' + str(next_timer) + ' minutes. Press start!'
        else:
            message = '–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ ' + str(next_timer) + ' –º–∏–Ω—É—Ç? –ñ–º–∏ —Å—Ç–∞—Ä—Ç!'

        return message

    def get_init_timers_message(self, time_periods):

        if len(time_periods) == 1:
            if self.lang == 'EN':
                message = 'There will be set 1 timer for ' + str(time_periods[0]) + ' minutes'
            else:
                message = '–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 1 —Ç–∞–π–º–µ—Ä –Ω–∞ ' + str(time_periods[0]) + ' –º–∏–Ω—É—Ç'

        else:
            timers = self.get_timers_count(time_periods)

            if self.lang == 'EN':

                message = 'There will be set {} timers for '.format(len(time_periods)) + timers + ' minutes'
            else:
                message = '–ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–∞–π–º–µ—Ä—ã ({}—à—Ç) –Ω–∞ '.format(len(time_periods)) + timers + ' –º–∏–Ω—É—Ç'

        return message

    def get_started_timer_message(self):
        timer_number = len(self.timers.prev_bunch)

        if self.timers.additional_time:
            if self.lang == "EN":
                message = 'Timer #{} extended for {} min. To pause the timer, press the ‚åõ button'\
                    .format(timer_number, self.timers.current_time)
            else:
                message = '–¢–∞–π–º–µ—Ä #{} –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {} –º–∏–Ω. –ß—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∂–º–∏ –Ω–∞ ‚åõ' \
                    .format(timer_number, self.timers.current_time)

        elif self.timers.extended:
            if self.lang == "EN":
                message = 'Timer #{} was resumed for the rest {} min. To pause the timer, press the ‚åõ button' \
                    .format(timer_number, self.timers.current_time)
            else:
                message = '–¢–∞–π–º–µ—Ä #{} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {} –º–∏–Ω. –ß—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∂–º–∏ –Ω–∞ ‚åõ' \
                    .format(timer_number, self.timers.current_time)

        else:

            if self.lang == "EN":
                message = 'Timer #{} for {} min. is started! To pause the timer, press the ‚åõ button'\
                    .format(timer_number, self.timers.current_time)
            else:
                message = '–¢–∞–π–º–µ—Ä #{} –Ω–∞ {} –º–∏–Ω. –∑–∞–ø—É—â–µ–Ω. –ß—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –∂–º–∏ –Ω–∞ ‚åõ'\
                    .format(timer_number, self.timers.current_time)

        return message

    def get_finished_timer_message(self):
        if self.lang == 'EN':
            if self.timers.scheduled_bunch:
                message = message = 'Timer for {} min. just finished. Continue?'.format(self.timers.current_time)
            else:
                message = 'All timers have finished! Well done!'
        else:
            if self.timers.scheduled_bunch:
                message = message = '–¢–∞–π–º–µ—Ä –Ω–∞ {} –º–∏–Ω. –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?'.format(self.timers.current_time)
            else:
                message = '–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞—Ç—å üíÉ'
        return message

    def get_paused_timer_message(self):
        mins = self.timers.current_time
        remain = self.timers.extended

        if self.lang == 'EN':
            message = 'Timer for {} min. was paused. Remain {} min. Press start to continue'.format(mins, remain)
        else:
            message = '–¢–∞–π–º–µ—Ä –Ω–∞ {} –º–∏–Ω. –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å {} –º–∏–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∂–º–∏ —Å—Ç–∞—Ä—Ç'.format(mins, remain)

        return message

    def get_alarm_message(self):

        if self.alarm_message:
            message = self.alarm_message

        elif self.lang == 'EN':
            message = 'Time is over!'
        else:
            message = '–í—Ä–µ–º—è –≤—ã—à–ª–æ!'
        return message

    def get_confirm_message(self):
        if self.lang == 'EN':
            message = 'You\'ve extended the current timer for {} minutes. Are you sure you don\'t want to change your' \
                      'activity?\n\nYour brain need some rest to be more productive!'.format(self.extended10*self.add_more)
        else:
            message = '–¢—ã –ø—Ä–æ–¥–ª–µ–≤–∞–µ—à—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä —É–∂–µ –Ω–∞ {} –º–∏–Ω—É—Ç. –ù–µ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤?' \
                      '\n\n–ú–æ–∑–≥—É –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º.'.format(self.extended10*self.add_more)
        return message

    def get_settings_message(self):
        if self.lang == 'EN':
            message = 'Settings: ' \
                      '\n\n/language - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫. –¢–µ–∫—É—â–∏–π - {}' \
                      '\n\n/alarm_count - to change how many times alarm message will appear. Current - {}' \
                      '\n\n/alarm_message - to change current alarm message. Current - "{}"' \
                      '\n\n/add_more - to change default value for adding more minutes to timer. Current - {} min' \
                      '\n\n/auto_start - to start first timer automatically. Current - {}'\
                .format(self.lang, self.alarm_count, self.get_alarm_message(), self.add_more, self.auto_start)
        else:
            message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ' \
                      '\n\n/language - to change language. Current - {}' \
                      '\n\n/alarm_count - –∑–∞–¥–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞. –°–µ–π—á–∞—Å - {}' \
                      '\n\n/alarm_message - –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –°–µ–π—á–∞—Å - "{}"' \
                      '\n\n/add_more - –∑–∞–¥–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ —Ç–∞–π–º–µ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –°–µ–π—á–∞—Å - {} min' \
                      '\n\n/auto_start - —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç–∞–π–º–µ—Ä –∏–∑ —Å–µ—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}' \
                .format(self.lang, self.alarm_count, self.get_alarm_message(), self.add_more, self.auto_start)

        return message

    def get_updated_language_message(self):
        if self.lang == 'EN':
            message = 'Language has been changed'
        else:
            message = '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω'
        return message

    def get_set_alarm_count_message(self):
        if self.lang == 'EN':
            message = 'Current parameter will set how many times alarm message will appeare. Current value - {}' \
                      '\n\nTo cancel changes input /cancel command'.format(self.alarm_count)
        else:
            message = '–î–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞.' \
                      '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel'.format(self.alarm_count)
        return message

    def get_setted_alarm_count_message(self):
        if self.lang == 'EN':
            message = '/alarm_count parameter was changed. Current value - {}'.format(self.alarm_count)
        else:
            message = '/alarm_count –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}'.format(self.alarm_count)
        return message

    def get_set_alarm_message_message(self):
        if self.lang == 'EN':
            message = 'Current parameter will define a message for alarm after a timer will have finished.' \
                      'Current value - {}.\n\nTo cancel changes input /cancel command'.format(self.alarm_message)
        else:
            message = '–î–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}' \
                      '\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel'.format(self.alarm_message)
        return message

    def get_setted_alarm_message_message(self):
        if self.lang == 'EN':
            message = '/alarm_message parameter was changed. Current value - {}'.format(self.alarm_message)
        else:
            message = '/alarm_message –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}'.format(self.alarm_message)
        return message

    def get_set_add_more_message(self):
        if self.lang == 'EN':
            message = 'Current parameter will define how many minutes will be automaticly added with \'Give me more minutes  ü§ì\' ' \
                      'button. Current value - {}.\n\nTo cancel changes input /cancel command'.format(self.add_more)

        else:
            message = '–î–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–¥–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \'–ú–Ω–µ –Ω—É–∂–Ω–æ –µ—â–µ –≤—Ä–µ–º—è!  ü§ì\'' \
                      '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel'.format(self.add_more)
        return message

    def get_setted_add_more_message(self):
        if self.lang == 'EN':
            message = '/add_more parameter was changed. Current value - {}'.format(self.add_more)
        else:
            message = '/add_more –ø–∞—Ä–∞–º–µ—Ç—Ä –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - {}'.format(self.add_more)
        return message

    def get_set_auto_start_message(self):

        if self.lang == 'EN':
            if self.auto_start:
                message = 'First timer starts automatically'
            else:
                message = 'All timers have to be started manually'
        else:
            if self.auto_start:
                message = '–ü–µ—Ä–≤—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
            else:
                message = '–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é'

        return message

    def get_cancel_message(self):
        if self.lang == 'EN':
            message = '–°hanges have been canceled'
        else:
            message = '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã'
        return message

    def get_wrong_format_message(self, set_parameter):
        if self.lang == 'EN':
            message = 'Wrong format message to set /{} parameter. Waiting for a single number.' \
                      '\n\nTo cancel changes input /cancel command'.format(set_parameter)
        else:
            message = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ /{}. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —á–∏—Å–ª–æ.' \
                      '\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cancel'.format(set_parameter)
        return message

    def get_remained_message(self, minutes):
        if self.lang == 'EN':
            message = '{} min. remain'.format(minutes)
        else:
            message = '{} –º–∏–Ω. –æ—Å—Ç–∞–ª–æ—Å—å'.format(minutes)

        return message

    def get_old_timers_message(self):

        if self.lang == 'EN':
            message = 'New bunch of timers were wet. Current timers are no longer exist.'
        else:
            message = '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã. –¢–µ–∫—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'

        return message

    def get_timers_count(self, time_periods):
        if len(time_periods) == 1:
            return str(time_periods[0])

        else:
            timers = ', '.join([str(time_periods[i]) for i in range(len(time_periods)-1)])

            if self.lang == 'EN':
                timers += ' and ' + str(time_periods[-1])
            else:
                timers += ' –∏ ' + str(time_periods[-1])

        return timers

    # Additional functions

    def check_is_number(self, message):
        is_single_number = re.fullmatch(r'[0-9]+', message.strip())

        return is_single_number

